# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    # Set up and install Java with maven in workflow machine
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
     # run: mvn -B package --file pom.xml
      run: mvn clean install


      # Test
    - name: Test
      run: mvn clean test
      # list current directory
    - name: list the current directory
      run: ls -a

    - name: check the target folder
      run: |
        cd target
        ls -a

     # Generate test report
    - name: Test report
      # mvn -B package --file pom.xml
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: /target/surefire-reports/WorkflowCicdApplicationTests-TestSuite.xml
        reporter: java-junit
        java-version: 11
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

    # WORKFLOW FOR CREATING DOCKER IMAGE AND PUSHING TO DOCKER HUB

    - name: Build & push Docker image
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
          image: code2dipi/cicd-images-integration
          tags: v1, latest
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


